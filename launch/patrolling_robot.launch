<launch>
    <!-- Run the architecture's component and test it based on random-based stimulus. -->
    <include file="$(find patrolling_robot)/launch/gazebo_environment.launch"/>
    <include file="$(find patrolling_robot)/launch/simulation_gmapping.launch"/>
    <include file="$(find patrolling_robot)/launch/move_base.launch"/>


    <rosparam param="test/random_plan_points"> [2, 8] </rosparam>
    <rosparam param="test/random_plan_time"> [0.2, 0.8] </rosparam>
    <rosparam param="test/random_motion_time"> [0.1, 1.0] </rosparam>
    <rosparam param="test/recharging_time"> 8 </rosparam>

    <rosparam param="test/random_sense/active"> True </rosparam>
    <rosparam param="test/random_sense/battery_time"> [15.0, 40.0] </rosparam>
    <rosparam param="test/random_sense/statement_time"> [0.5, 1.0] </rosparam>

    <node pkg="armor" 
          type="execute" 
          name="armor_service" 
          args="it.emarolab.armor.ARMORMainService"
          output="log"
    > </node>

    <node pkg = "surveillance_robot"
          type = "state_machine.py"      
          name = "state_machine"
          respawn="true"
          respawn_delay="4"
          launch-prefix="xterm -fa 'Monospace' -fs 14 -e"
          output = "screen"
    > </node>

    <node pkg="patrolling_robot"
         type="marker_server" 
         name="marker_server" 
    > </node>

    <node pkg="patrolling_robot"
          type="move_camera" 
          name="move_camera"
          output="screen"
    > </node>

    <node pkg="patrolling_robot"
          type="find_markers" 
          name="find_markers"
          launch-prefix="xterm -fa 'Monospace' -fs 10 -e"
          output="screen"
    > </node>

    <node pkg = "surveillance_robot"  
          type = "battery_manager.py"
          name = "battery_manager"
          output = "screen"
    > </node>

    <node pkg = "patrolling_robot"  
          type = "planner.py"
          name = "planner"
          output = "screen"
    > </node>

    <node pkg = "patrolling_robot"  
          type = "controller.py"
          name = "controller"
          launch-prefix="xterm -fa 'Monospace' -fs 10 -e"
          output = "screen"
    > </node>

    <node pkg = "patrolling_robot"  
          type = "rosbot_state.py"
          name = "rosbot_state"
          output = "screen"
    > </node>

</launch>
